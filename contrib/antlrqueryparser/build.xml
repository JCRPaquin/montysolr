<?xml version="1.0"?>

<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->

<project name="antlrqueryparser" default="default">

	<description>
    ANTLR Flexible Query Parser
  </description>

	<import file="../contrib-build.xml"/>

	<property name="aqp.grammars.dir" location="./grammars" />
	<property name="aqp.parser.dir" location="src/java/org/apache/lucene/queryParser/aqp/parser" />
	<property name="aqp.classes.dir" location="${build.dir}/classes/java" />
	<property name="aqp.classes.parser.dir" location="${aqp.classes.dir}/org/apache/lucene/queryParser/aqp/parser" />
	<property name="aqp.dotfile" location="${build.dir}/graph.dot" />
	<property name="aqp.generate.py" location="src/python/generate_asts.py" />



	<condition property="aqp.grammar" value="StandardLuceneGrammar">
		<not>
			<isset property="grammar"/>
		</not>
	</condition>
	<property name="aqp.grammar" value="${grammar}"/>

	<condition property="aqp.rule" value="mainQ">
		<not>
			<isset property="rule"/>
		</not>
	</condition>
	<property name="aqp.rule" value="${rule}"/>


	<condition property="aqp.query" value="standard query">
		<not>
			<isset property="query"/>
		</not>
	</condition>
	<property name="aqp.query" value="${query}" />

	<path id="classpath">
		<path refid="base.classpath"/>
		<pathelement location="${build.dir}/classes/java"/>
		<fileset dir="lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="test.classpath">
		<path refid="classpath"/>
		<path refid="test.base.classpath"/>
		<pathelement location="${build.dir}/classes/test"/>
		<fileset dir="lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<target name="clean">
		<delete dir="${build.dir}" />
	</target>

	<target name="compile-core" depends="antlr,compile"/>

	<!--
    NOTE: see the README.antlr for details on how to fully regenerate the parser
  -->
	<target name="antlr" depends="antlr-generate,antlr-compile" 
		description="Regenerates grammar; usage -Dgrammar=&lt;name&gt;"/>

	<target name="antlr-generate" >
		<echo>
		Regenerating: ${aqp.grammar}
		Output: ${aqp.classes.parser.dir}
        </echo>
		<mkdir dir="${aqp.classes.parser.dir}"/>
		<delete dir="${aqp.classes.parser.dir}" failonerror="false}">
			<fileset dir="${aqp.classes.parser.dir}">
				<include name="${aqp.grammar}*.java" />
				<include name="${aqp.grammar}*.tokens" />
			</fileset>
		</delete>

		<java classpathref="test.classpath"
            classname="org.antlr.Tool"
			failonerror="true"
            >
			<arg value="-o"/>
			<arg value="${aqp.classes.parser.dir}"/>
			<arg value="${aqp.grammars.dir}/${aqp.grammar}.g"/>
		</java>

		<!-- also copy the grammar lexer/token into the src dir -->

		<copy todir="${aqp.parser.dir}">
			<fileset dir="${aqp.classes.parser.dir}">
				<include name="${aqp.grammar}*.java" />
				<include name="${aqp.grammar}*.tokens" />
			</fileset>
		</copy>
		
		<!-- generate the wrappr for lucene -->
		<antcall target="build-wrapper" />

	</target>

	<target name="antlr-compile" depends="antlr-generate">
		<javac classpathref="classpath" 
			srcdir="${aqp.classes.parser.dir}"
			destdir="${aqp.classes.dir}"
			/>
	</target>

	<target name="compile" description="Compiles all the java classes" depends="antlr">
		<javac classpathref="test.classpath" 
            srcdir="src/java"
            destdir="${build.dir}/classes/java"
            >
			<include name="**/*.java"/>
		</javac>
	</target>


	<target name="dot" >
		<delete file="${aqp.dotfile}" />
		<echo>
        Generating DOT: ${aqp.grammar}  
		Query: ${aqp.query} 
		Rule: ${aqp.rule}   
        </echo>
		<java classpathref="test.classpath"
            classname="org.apache.lucene.queryParser.aqp.parser.BuildAST"
        	output="${aqp.dotfile}"
        	errorproperty="aqp.antlr-dot.error"
			failonerror="true"
            >
			<arg value="${aqp.grammar}"/>
			<arg value="${aqp.query}" />
			<arg value="${aqp.rule}"/>
		</java>
	</target>

	<target name="tree" >
		<echo>
			Generating TREE: ${aqp.grammar}  
			Query: ${aqp.query} 
			Rule: ${aqp.rule}       
        </echo>
		<java classpathref="test.classpath"
            classname="org.apache.lucene.queryParser.aqp.parser.BuildAST"
            >
			<arg value="${aqp.grammar}"/>
			<arg value="${aqp.query}"/>
			<arg value="${aqp.rule}"/>
			<arg value="tree"/>
		</java>
	</target>

	<target name="display" depends="dot" >
		<exec executable="${dot_viewer}" failifexecutionfails="true">
			<arg line="${aqp.dotfile}"/>
		</exec>
	</target>

	<target name="view" description="Test the string, usage: ant -Dquery=string">
		<antcall target="dot" />
		<antcall target="tree" />
		<antcall target="display" />
	</target>
	
	<target name="try-view" description="Like view, but regenerates the grammar first" depends="antlr-compile,view" />
	<target name="try-tree" description="Like view, but regenerates the grammar first" depends="antlr-compile,tree" />

	<target name="gunit" description="Run the gunit test suite, usage: ant -Dgrammar=name" depends="antlr">
		<echo>
        Running GUNIT: ${aqp.grammar}        
        </echo>
		<java classpathref="test.classpath"
            classname="org.antlr.gunit.Interp"
            >
			<arg value="${aqp.grammars.dir}/${aqp.grammar}.gunit"/>
		</java>
	</target>

	<target name="test" depends="default" >
		<antcall target="common.test" />
	</target>

	<target name="generate-html" description="Generates a html page for the grammar X (from X.gunit file)" depends="antlr-compile" >
		<mkdir dir="${build.dir}/classes/test"/>

		<javac classpathref="test.classpath" 
		            srcdir="src/test"
		            destdir="${build.dir}/classes/test"
		            >
			<include name="**/BuildAST.java"/>
		</javac>

		<exec executable="${prop.python}" failonerror="true" >
			<arg value="${aqp.generate.py}"/>
			<arg value="${aqp.grammar}"/>
			<arg value="${build.dir}"/>
			<arg value="${toString:test.classpath}" />
			<arg value="${aqp.grammars.dir}"/>
		</exec>
		<echo>
		The html with diagram is at: ${build.dir}/${aqp.grammar}.html
	    </echo>
	</target>
	
	<target name="build-wrapper" >
		
        <echo file="${aqp.parser.dir}/${aqp.grammar}SyntaxParser.java">
              <![CDATA[
package org.apache.lucene.queryParser.aqp.parser;


/**
 * Automatically generated SyntaxParser wrapper built by ant
 * from the grammar source: ${aqp.grammars.dir}/${aqp.grammar}.g
 * 
 * YOUR CHANGES MAY BE OVERWRITTEN AUTOMATICALLY!
 */

import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;
import org.apache.lucene.messages.Message;
import org.apache.lucene.messages.MessageImpl;
import org.apache.lucene.queryParser.aqp.AqpCommonTree;
import org.apache.lucene.queryParser.aqp.AqpCommonTreeAdaptor;
import org.apache.lucene.queryParser.core.QueryNodeParseException;
import org.apache.lucene.queryParser.core.messages.QueryParserMessages;
import org.apache.lucene.queryParser.core.nodes.QueryNode;
import org.apache.lucene.queryParser.core.parser.SyntaxParser;

import org.apache.lucene.queryParser.aqp.parser.${aqp.grammar}Lexer;
import org.apache.lucene.queryParser.aqp.parser.${aqp.grammar}Parser;


public class ${aqp.grammar}SyntaxParser implements SyntaxParser {
    
    
    @Override
    /**
     * Parses a query and returns QueryNode tree. It does not use reflection.
     * 
     * @param query
     * @param field
     * @return
     * @throws QueryNodeParseException
     */
    public QueryNode parse(CharSequence query, CharSequence field)
            throws QueryNodeParseException {

        ANTLRStringStream in = new ANTLRStringStream(query.toString());
        ${aqp.grammar}Lexer lexer = new ${aqp.grammar}Lexer(in);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        ${aqp.grammar}Parser parser = new ${aqp.grammar}Parser(
                tokens);
        ${aqp.grammar}Parser.mainQ_return returnValue;
        
        AqpCommonTreeAdaptor adaptor = new AqpCommonTreeAdaptor(parser.getTokenNames());
        parser.setTreeAdaptor(adaptor);
        
        AqpCommonTree astTree;
        
        try {
            returnValue = parser.mainQ();
            astTree = (AqpCommonTree) returnValue.getTree();
            return astTree.toQueryNodeTree();
        } catch (RecognitionException e) {
            throw new QueryNodeParseException(new MessageImpl(query + " " + parser.getErrorMessage(e, parser.getTokenNames())));
        } catch (Exception e) {
            Message message = new MessageImpl(
                    QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query,
                    e.getMessage());
            QueryNodeParseException ee = new QueryNodeParseException(e);
            ee.setQuery(query);
            ee.setNonLocalizedMessage(message);
            throw ee;
        } catch (Error e) {
            Message message = new MessageImpl(
                    QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query,
                    e.getMessage());
            QueryNodeParseException ee = new QueryNodeParseException(e);
            ee.setQuery(query);
            ee.setNonLocalizedMessage(message);
            throw ee;
        }
        
        
    }

}
]]>     
      </echo>

		
	</target>

</project>
