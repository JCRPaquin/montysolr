<?xml version="1.0"?>

<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->

<project name="antlrqueryparser" default="default">

	<description>
    ANTLR Flexible Query Parser
  </description>

	<import file="../contrib-build.xml"/>

	<property name="aqp.grammars.dir" location="./grammars" />
	<property name="aqp.parser.dir" location="src/java/org/apache/lucene/queryParser/aqp/parser" />
	<property name="aqp.classes.dir" location="${build.dir}/classes/java" />
	<property name="aqp.classes.parser.dir" location="${aqp.classes.dir}/org/apache/lucene/queryParser/aqp/parser" />
	<property name="aqp.dotfile" location="${build.dir}/graph.dot" />
	<property name="aqp.generate.py" location="${common.dir}/contrib/antlrqueryparser/src/python/generate_asts.py" />



	<condition property="aqp.grammar" value="StandardLuceneGrammar">
		<not>
			<isset property="grammar"/>
		</not>
	</condition>
	<property name="aqp.grammar" value="${grammar}"/>

	<condition property="aqp.rule" value="mainQ">
		<not>
			<isset property="rule"/>
		</not>
	</condition>
	<property name="aqp.rule" value="${rule}"/>


	<condition property="aqp.query" value="standard query">
		<not>
			<isset property="query"/>
		</not>
	</condition>
	<property name="aqp.query" value="${query}" />

	<path id="classpath">
		<path refid="base.classpath"/>
		<pathelement location="${build.dir}/classes/java"/>
		<fileset dir="lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="test.classpath">
		<path refid="classpath"/>
		<path refid="test.base.classpath"/>
		<pathelement location="${build.dir}/classes/test"/>
		<fileset dir="lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>




	<target name="clean">
		<delete dir="${build.dir}" />
		<clean-parser grammar-name="${aqp.grammar}" parser-dir="${aqp.parser.dir}"/>
	</target>

	<target name="compile-core" depends="antlr,compile"/>

	<!--
    NOTE: see the README.antlr for details on how to fully regenerate the parser
    -->
	
	<target name="antlr" depends="antlr-generate" 
		description="Regenerates grammar; usage -Dgrammar=&lt;name&gt;"/>

	<target name="antlr-generate" >
		
		<generate-grammar grammar-name="${aqp.grammar}"
			 grammar-dir="${aqp.grammars.dir}"
			 parser-dir="${aqp.parser.dir}"
			 build-dir="${aqp.classes.dir}"
			 classpathref="test.classpath"
			   />

	</target>


	<!-- compiles both grammar and the test classes -->
	<target name="compile-all" depends="compile">

		<mkdir dir="${build.dir}/classes/test"/>
		<javac classpathref="test.classpath" 
                    srcdir="src/test"
                    destdir="${build.dir}/classes/test"
                    >
			<include name="**/BuildAST.java"/>
		</javac>
	</target>

	<target name="compile" description="Compiles all the java classes" depends="antlr">
		<javac classpathref="test.classpath" 
            srcdir="src/java"
            destdir="${build.dir}/classes/java"
            >
			<include name="**/*.java"/>
		</javac>
	</target>


	<target name="dot" >
		<generate-dot grammar-name="${aqp.grammar}"
		            query="${aqp.query}"
		            rule="${aqp.rule}"
		            classpathref="test.classpath"
			        output-file="${aqp.dotfile}"
		        />
	</target>

	
	<target name="tree" >
		<generate-tree grammar-name="${aqp.grammar}"
			query="${aqp.query}"
			rule="${aqp.rule}"
			classpathref="test.classpath"
		/>

	</target>

	
	<target name="display" depends="dot" >
		<exec executable="${dot_viewer}" failifexecutionfails="true">
			<arg line="${aqp.dotfile}"/>
		</exec>
	</target>

	
	<target name="view" description="Test the string, usage: ant -Dquery=string">
		<antcall target="dot" />
		<antcall target="tree" />
		<antcall target="display" />
	</target>

	<target name="try-view" description="Like view, but regenerates the grammar first" depends="compile-all,view" />
	<target name="try-tree" description="Like view, but regenerates the grammar first" depends="compile-all,tree" />

	<target name="gunit" description="Run the gunit test suite, usage: ant -Dgrammar=name" depends="antlr">
		<run-gunit grammar-name="${aqp.grammar}" grammar-dir="${aqp.grammars.dir}" classpathref="test.classpath"/>

	</target>

	
	<target name="test" depends="default" >
		<antcall target="common.test" />
	</target>

	
	<target name="generate-html" description="Generates a html page for the grammar X (from X.gunit file)" depends="compile-all" >

		<generate-html python-executable="${prop.python}"
			  python-generator="${aqp.generate.py}"
			  grammar-name="${aqp.grammar}"
			  build-dir="${build.dir}"
			  classpath="${toString:test.classpath}"
			  grammar-dir="${aqp.grammars.dir}"
			  />
	</target>

	

	<!--
	============================================================================================
	                                           MACROS
    ============================================================================================
	//-->
    
	<macrodef name="clean-parser">
        <attribute name="grammar-name"/>
        <attribute name="parser-dir"/>
        <sequential>
        	<delete dir="@{grammar-dir}" failonerror="false">
	            <fileset dir="@{parser-dir}">
	                <include name="@{grammar-name}*.java" />
	            	<include name="@{grammar-name}*.class" />
	                <include name="@{grammar-name}*.tokens" />
	            </fileset>
	        </delete>
        </sequential>
    </macrodef>

	<macrodef name="generate-grammar">
		<attribute name="grammar-name"/>
		<attribute name="grammar-dir"/>
		<attribute name="build-dir"/>
		<attribute name="parser-dir"/>
		<attribute name="classpathref"/>
		<sequential>
			
			<clean-parser parser-dir="@{parser-dir}" grammar-name="@{grammar-name}"/>
			<clean-parser parser-dir="@{build-dir}" grammar-name="@{grammar-name}"/>
			
			<echo>
    	        Regenerating: @{grammar-name}
    	        Output: @{parser-dir}
    	        </echo>

			
			<java classpathref="@{classpathref}"
    	            classname="org.antlr.Tool"
    	            failonerror="true"
    	            >
				<arg value="-o"/>
				<arg value="@{parser-dir}"/>
				<arg value="@{grammar-dir}/@{grammar-name}.g"/>
			</java>
		    
			<mkdir dir="@{build-dir}"/>
			<javac classpathref="@{classpathref}" 
	        	            srcdir="@{parser-dir}"
	        	            destdir="@{build-dir}"
	        	            >
				<include name="**/@{grammar-name}Parser.java" />
				<include name="**/@{grammar-name}Lexer.java" />
				<include name="**/@{grammar-name}.tokens" />
			</javac>
			
			<!-- generate the wrapper for lucene -->
	        <generate-syntax-parser parser-dir="@{parser-dir}" grammar-name="@{grammar-name}"/>
			
		</sequential>
	</macrodef>

	<macrodef name="generate-dot">
		<attribute name="grammar-name"/>
		<attribute name="query"/>
		<attribute name="rule"/>
		<attribute name="output-file"/>
		<attribute name="classpathref"/>
		<sequential>
			<delete file="@{output-file}" failonerror="false"/>
			<echo>
	                Generating DOT: @{grammar-name}  
	                Query: @{query} 
	                Rule: @{rule}       
	            </echo>
			<java classpathref="@{classpathref}"
	                classname="org.apache.lucene.queryParser.aqp.parser.BuildAST"
	            	output="@{output-file}"
	            	            errorproperty="aqp.antlr-dot.error"
	            	            failonerror="true"
	                >
				<arg value="@{grammar-name}"/>
				<arg value="@{query}"/>
				<arg value="@{rule}"/>
				<arg value="dot"/>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="generate-tree">
		<attribute name="grammar-name"/>
		<attribute name="query"/>
		<attribute name="rule"/>
		<attribute name="classpathref"/>
		<sequential>
			<echo>
   	            Generating TREE: @{grammar-name}  
   	            Query: @{query} 
   	            Rule: @{rule}       
   	        </echo>
			<java classpathref="@{classpathref}"
   	            classname="org.apache.lucene.queryParser.aqp.parser.BuildAST"
   	            >
				<arg value="@{grammar-name}"/>
				<arg value="@{query}"/>
				<arg value="@{rule}"/>
				<arg value="tree"/>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="run-gunit">
		<attribute name="grammar-name"/>
		<attribute name="grammar-dir"/>
		<attribute name="classpathref"/>
		<sequential>
			<echo>
        Running GUNIT: @{grammar-name}        
        </echo>
			<java classpathref="@{classpathref}"
            classname="org.antlr.gunit.Interp"
            >
				<arg value="@{grammar-dir}/@{grammar-name}.gunit"/>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="generate-html">
		<attribute name="python-executable" default="python"/>
		<attribute name="python-generator" />
		<attribute name="grammar-name" />
		<attribute name="build-dir" />
		<attribute name="classpath" />
		<attribute name="grammar-dir" />
		<sequential>
			<exec executable="@{python-executable}" failonerror="true" >
				<arg value="@{python-generator}"/>
				<arg value="@{grammar-name}"/>
				<arg value="@{build-dir}"/>
				<arg value="@{classpath}" />
				<arg value="@{grammar-dir}"/>
			</exec>
			<echo>
	        The html with diagram is at: @{grammar-dir}/@{grammar-name}.html
	        </echo>
		</sequential>
	</macrodef>

	<macrodef name="generate-syntax-parser">
		<attribute name="grammar-name"/>
		<attribute name="parser-dir"/>
		<sequential>
			<echo file="@{parser-dir}/@{grammar-name}SyntaxParser.java">
				<![CDATA[
package org.apache.lucene.queryParser.aqp.parser;


/**
 * Automatically generated SyntaxParser wrapper built by ant
 * from the grammar source: ${aqp.grammars.dir}/${aqp.grammar}.g
 * 
 * YOUR CHANGES MAY BE OVERWRITTEN AUTOMATICALLY!
 */

import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;
import org.apache.lucene.messages.Message;
import org.apache.lucene.messages.MessageImpl;
import org.apache.lucene.queryParser.aqp.AqpCommonTree;
import org.apache.lucene.queryParser.aqp.AqpCommonTreeAdaptor;
import org.apache.lucene.queryParser.core.QueryNodeParseException;
import org.apache.lucene.queryParser.core.messages.QueryParserMessages;
import org.apache.lucene.queryParser.core.nodes.QueryNode;
import org.apache.lucene.queryParser.core.parser.SyntaxParser;

import org.apache.lucene.queryParser.aqp.AqpSyntaxParser;
import org.apache.lucene.queryParser.aqp.parser.@{grammar-name}Lexer;
import org.apache.lucene.queryParser.aqp.parser.@{grammar-name}Parser;


public class @{grammar-name}SyntaxParser implements AqpSyntaxParser {
    
    
    @Override
    /**
     * Parses a query and returns QueryNode tree. It does not use reflection.
     * 
     * @param query
     * @param field
     * @return
     * @throws QueryNodeParseException
     */
    public QueryNode parse(CharSequence query, CharSequence field)
            throws QueryNodeParseException {

        ANTLRStringStream in = new ANTLRStringStream(query.toString());
        @{grammar-name}Lexer lexer = new @{grammar-name}Lexer(in);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        @{grammar-name}Parser parser = new @{grammar-name}Parser(
                tokens);
        @{grammar-name}Parser.mainQ_return returnValue;
        
        AqpCommonTreeAdaptor adaptor = new AqpCommonTreeAdaptor(parser.getTokenNames());
        parser.setTreeAdaptor(adaptor);
        
        AqpCommonTree astTree;
        
        try {
            returnValue = parser.mainQ();
            astTree = (AqpCommonTree) returnValue.getTree();
            return astTree.toQueryNodeTree();
        } catch (RecognitionException e) {
            throw new QueryNodeParseException(new MessageImpl(query + " " + parser.getErrorMessage(e, parser.getTokenNames())));
        } catch (Exception e) {
            Message message = new MessageImpl(
                    QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query,
                    e.getMessage());
            QueryNodeParseException ee = new QueryNodeParseException(e);
            ee.setQuery(query);
            ee.setNonLocalizedMessage(message);
            throw ee;
        } catch (Error e) {
            Message message = new MessageImpl(
                    QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query,
                    e.getMessage());
            QueryNodeParseException ee = new QueryNodeParseException(e);
            ee.setQuery(query);
            ee.setNonLocalizedMessage(message);
            throw ee;
        }
        
        
    }
	
	@Override
    public AqpSyntaxParser initializeGrammar(String grammarName)
            throws Exception {
        return this;
    }

}
]]>
			</echo>

		</sequential>
	</macrodef>

</project>
