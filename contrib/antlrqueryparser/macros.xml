<?xml version="1.0"?>

<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->

<project name="aqp-macros" >

	<import file="../../common-build.xml"/>
	
	<macrodef name="clean-parser">
        <attribute name="grammar-name"/>
        <attribute name="parser-dir"/>
        <sequential>
            <delete dir="@{grammar-dir}" failonerror="false">
                <fileset dir="@{parser-dir}">
                    <include name="@{grammar-name}*.java" />
                    <include name="@{grammar-name}*.class" />
                    <include name="@{grammar-name}*.tokens" />
                </fileset>
            </delete>
        </sequential>
    </macrodef>

    <macrodef name="generate-grammar">
        <attribute name="grammar-name"/>
        <attribute name="grammar-dir"/>
        <attribute name="build-dir"/>
        <attribute name="parser-dir"/>
        <attribute name="classpathref"/>
    	<attribute name="compilerarg" default="-nowarn"/> <!-- Because parser is a generated code, we have little control over it and  disable the warnings -->
        <sequential>
            
            <clean-parser parser-dir="@{parser-dir}" grammar-name="@{grammar-name}"/>
            <clean-parser parser-dir="@{build-dir}" grammar-name="@{grammar-name}"/>
            
            <echo>
                Regenerating: @{grammar-name}
                Output: @{parser-dir}
                </echo>

            
            <java classpathref="@{classpathref}"
                    classname="org.antlr.Tool"
                    failonerror="true"
                    >
                <arg value="-o"/>
                <arg value="@{parser-dir}"/>
                <arg value="@{grammar-dir}/@{grammar-name}.g"/>
            </java>
            
            <mkdir dir="@{build-dir}"/>
        	
        	<compile
                srcdir="@{parser-dir}"
                destdir="@{build-dir}">
        		<include name="**/@{grammar-name}Parser.java" />
                <include name="**/@{grammar-name}Lexer.java" />
                <include name="**/@{grammar-name}.tokens" />
        		<classpath refid="@{classpathref}" />
        		<compilerarg line="@{compilerarg}" />
        	</compile>
        	
        	
            <!-- generate the wrapper for lucene -->
            <generate-syntax-parser parser-dir="@{parser-dir}" grammar-name="@{grammar-name}"/>
            
        </sequential>
    </macrodef>

    <macrodef name="generate-dot">
        <attribute name="grammar-name"/>
        <attribute name="query"/>
        <attribute name="rule"/>
        <attribute name="output-file"/>
        <attribute name="classpathref"/>
        <sequential>
            <delete file="@{output-file}" failonerror="false"/>
            <echo>
                    Generating DOT: @{grammar-name}  
                    Query: @{query} 
                    Rule: @{rule}       
                </echo>
            <java classpathref="@{classpathref}"
                    classname="org.apache.lucene.queryParser.aqp.parser.BuildAST"
                    output="@{output-file}"
                                errorproperty="aqp.antlr-dot.error"
                                failonerror="true"
                    >
                <arg value="@{grammar-name}"/>
                <arg value="@{query}"/>
                <arg value="@{rule}"/>
                <arg value="dot"/>
            </java>
        </sequential>
    </macrodef>

    <macrodef name="generate-tree">
        <attribute name="grammar-name"/>
        <attribute name="query"/>
        <attribute name="rule"/>
        <attribute name="classpathref"/>
        <sequential>
            <echo>
                Generating TREE: @{grammar-name}  
                Query: @{query} 
                Rule: @{rule}       
            </echo>
            <java classpathref="@{classpathref}"
                classname="org.apache.lucene.queryParser.aqp.parser.BuildAST"
                >
                <arg value="@{grammar-name}"/>
                <arg value="@{query}"/>
                <arg value="@{rule}"/>
                <arg value="tree"/>
            </java>
        </sequential>
    </macrodef>

    <macrodef name="run-gunit">
        <attribute name="grammar-name"/>
        <attribute name="grammar-dir"/>
        <attribute name="classpathref"/>
        <sequential>
            <echo>
            Running GUNIT: @{grammar-name}        
            </echo>
            <java classpathref="@{classpathref}"
                classname="org.antlr.gunit.Interp"
                >
                <arg value="@{grammar-dir}/@{grammar-name}.gunit"/>
            </java>
        </sequential>
    </macrodef>

    <macrodef name="generate-html">
        <attribute name="python-executable" default="python"/>
        <attribute name="python-generator" />
        <attribute name="grammar-name" />
        <attribute name="build-dir" />
        <attribute name="classpath" />
        <attribute name="grammar-dir" />
    	<attribute name="java-executable" default="java"/>
    	<attribute name="dot-executable" default="dot"/>
    	
        <sequential>
            <exec executable="@{python-executable}" failonerror="true" >
                <arg value="@{python-generator}"/>
                <arg value="@{grammar-name}"/>
                <arg value="@{build-dir}"/>
                <arg value="@{classpath}" />
                <arg value="@{grammar-dir}"/>
            	<arg value="@{java-executable}"/>
        		<arg value="@{dot-executable}"/>
            </exec>
            <echo>
            The html with diagram is at: @{grammar-dir}/@{grammar-name}.html
            </echo>
        </sequential>
    </macrodef>

    <macrodef name="generate-syntax-parser">
        <attribute name="grammar-name"/>
        <attribute name="parser-dir"/>
        <sequential>
            <echo file="@{parser-dir}/@{grammar-name}SyntaxParser.java">
                <![CDATA[
package org.apache.lucene.queryParser.aqp.parser;


/**
 * Automatically generated SyntaxParser wrapper built by ant
 * from the grammar source: @{parser-dir}/@{grammar-name}.g
 * 
 * YOUR CHANGES WILL BE OVERWRITTEN AUTOMATICALLY!
 */

import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.TokenStream;
import org.apache.lucene.messages.Message;
import org.apache.lucene.messages.MessageImpl;
import org.apache.lucene.queryParser.aqp.AqpCommonTree;
import org.apache.lucene.queryParser.aqp.AqpCommonTreeAdaptor;
import org.apache.lucene.queryParser.core.QueryNodeParseException;
import org.apache.lucene.queryParser.core.messages.QueryParserMessages;
import org.apache.lucene.queryParser.core.nodes.QueryNode;

import org.apache.lucene.queryParser.aqp.AqpSyntaxParser;            	
import org.apache.lucene.queryParser.aqp.AqpSyntaxParserAbstract;
import org.apache.lucene.queryParser.aqp.parser.@{grammar-name}Lexer;
import org.apache.lucene.queryParser.aqp.parser.@{grammar-name}Parser;


public class @{grammar-name}SyntaxParser extends AqpSyntaxParserAbstract {
    
    
    public AqpSyntaxParser initializeGrammar(String grammarName)
            throws QueryNodeParseException {
        return this;
    }

    public TokenStream getTokenStream(CharSequence input) {
        ANTLRStringStream in = new ANTLRStringStream(input.toString());
        @{grammar-name}Lexer lexer = new @{grammar-name}Lexer(in);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        return tokens;
    }

    public QueryNode parseTokenStream(TokenStream tokens, CharSequence query,
            CharSequence field) throws QueryNodeParseException {
        @{grammar-name}Parser parser = new @{grammar-name}Parser(tokens);
        @{grammar-name}Parser.mainQ_return returnValue;
        
        AqpCommonTreeAdaptor adaptor = new AqpCommonTreeAdaptor(parser.getTokenNames());
        parser.setTreeAdaptor(adaptor);
        
        AqpCommonTree astTree;
        
        try {
            returnValue = parser.mainQ();
            astTree = (AqpCommonTree) returnValue.getTree();
            return astTree.toQueryNodeTree();
        } catch (RecognitionException e) {
            throw new QueryNodeParseException(new MessageImpl(query + " " + parser.getErrorMessage(e, parser.getTokenNames())));
        } catch (Exception e) {
            Message message = new MessageImpl(
                    QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query,
                    e.getMessage());
            QueryNodeParseException ee = new QueryNodeParseException(e);
            ee.setQuery(query);
            ee.setNonLocalizedMessage(message);
            throw ee;
        } catch (Error e) {
            Message message = new MessageImpl(
                    QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query,
                    e.getMessage());
            QueryNodeParseException ee = new QueryNodeParseException(e);
            ee.setQuery(query);
            ee.setNonLocalizedMessage(message);
            throw ee;
        }
    }

}

            
]]>
            </echo>

        </sequential>
    </macrodef>


</project>
