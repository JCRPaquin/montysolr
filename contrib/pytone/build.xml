<?xml version="1.0"?>

<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->

<project name="pytone" default="default">

    <description>
    ADS Python Extensions
    </description>

	<property name="src.dir.python" location="src/python" />
	
	<property file="build.properties" />
	
    <import file="../contrib-build.xml" />
	
	<!--
	  ==================================================================
	     Initialization & maintenance
	  ==================================================================
	  -->
	
	<!--set default PYTHONPATH if the environemnt is empty -->
	<property environment="env" />
	<property name="env.PYTHONPATH" value="${dist.dir}${path.separator}${src.dir.python}${path.separator}"/>


	<!--
    these classes must be made available/known to JCC when we compile the wrapper
    They will be made visible to Python, but are also used for generation of the jars.
     -->
	<property name="montysolr.classes" value="
		monty.solr.jni.MontySolrBridge
		monty.solr.jni.MontySolrVM
		monty.solr.jni.PythonBridge
		monty.solr.jni.PythonMessage
		" />
	<property name="jcc.build" value="${montysolr.classes}" />
	<property name="jcc.packages" value=""/>
    

	<!--
    _build variables are there to add extra classes to the wrapper - some packages (either in lucene or for montysolr)
    are not usable/visible, unless also these classes are present. So this is here to add these extra components to the build.
    I tried registerining packages only, but it didn't work for v2.9, so i am listing classes directly
    java.util.ArrayList
    -->
	<property name="jcc.build_also" value="
		java.lang.Float
		java.lang.System
		java.lang.String
		" />

	
	
	<!-- Default target: usage.  Prints out instructions. -->
	<target name="usage"
	          description="Prints out instructions">
		<echo message="Welcome to the MontySolr project!" />
		<echo message="Use 'ant build-all' to compile MontySolr and prepare demos." />
		<echo message="Use 'ant run-example' to run the example." />

		<echo message="And for developers:"/>
		<echo message="Use 'ant clean' to clean compiled files." />
		<echo message="Use 'ant compile' to compile the Java source code." />
		<echo message="Use 'ant build' to compile only MontySolr as a Python module." />
		<echo message="Use 'ant build-solr' to compile only Solr as a Python module." />
		<echo message="TODOs:" />
		<echo message="Use 'ant automatic-install' to install everything incl dependencies." />
		<echo message="Use 'ant package' to generate zip, tgz, and maven artifacts for distribution." />
		<echo message="Use 'ant test' to run unit tests." />
	</target>

	
	<!-- this is needed for all targets -->
	<target name="init" depends="check_properties,die_unless_propertiesOK,check-solr-location">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${build.dir}/jar" />

		<exec executable="${python}" failonerror="false" errorproperty="test_import_errors" >
			<arg value="-c"/>
			<arg value="import jcc; import lucene; lucene.initVM()" />
		</exec>

		<condition property="import_ok">
			<equals arg1="${test_import_errors}" arg2=""/>
		</condition>

		<fail unless="import_ok" message="${test_import_errors}${line.separator}Please install the required Python modules first (jcc, lucene)" />


		<!-- retrieves the location of the jcc and stores in inside jcc_egg -->
	    <exec executable="${python}" failonerror="true" outputproperty="jcc_egg" logerror="true">
	        <arg value="-c"/>
	        <arg value="import os, jcc; print os.path.dirname(os.path.dirname(jcc.__file__))" />
	    </exec>
	    
	</target>
	
	<target name="check-solr-location">
		<!--TODO: import this from somewhere -->
		<property name="solr.real.location" location="TODO" />
	</target>
	
	<target name="check_properties">
		<condition property="propertiesOK">
			<and>
				<isset property="python" />
				<isset property="jcc" />
				<isset property="ant" />
			</and>
		</condition>
	</target>
	
	<target name="die_unless_propertiesOK" unless="propertiesOK">
		<echo>The properties of the project are not set correctly. Copy "build.properties.default" -> "build.properties" and edit the new file if necessary.</echo>
		<fail />
	</target>
	
	
	<!--
	================================================================
								Build Stuff
	================================================================
	-->
	
	<target name="unzip-solr-egg">
        <!-- retrieves the location of the jcc -->
        <exec executable="${python}" failonerror="true" outputproperty="_tmp_solr_err" dir="${build.dir}/dist" logerror="true">
            <arg value="-c"/>
            <arg value="import os,glob; print os.path.abspath(glob.glob('./${app.solr.name}*.egg')[0])" />
        </exec>

        <delete dir="${dist.dir}/${app.solr.name}.egg-info" failonerror="no" />
        <delete dir="${dist.dir}/${app.solr.name}" failonerror="no" />

        <unzip dest="${dist.dir}" overwrite="yes">
            <fileset dir="${dist.dir}">
                <include name="${app.solr.name}*.egg" />
            </fileset>
        </unzip>
        <move file="${dist.dir}/EGG-INFO" tofile="${dist.dir}/${app.solr.name}.egg-info" />
    </target>
	
	<target name="try-lucene-jars" depends="check-solr-location" >
		<!-- since on old ant we cannot ignore it -->
		<mkdir dir="${solr.real.location}/dist" />

		<path id="montysolr.classpath.testing">
			<fileset dir="${solr.real.location}/dist" includes="**/*.jar" />
		</path>

		<condition property="lucene.jars.exist" value="true">
			<and>
				<available classname="org.apache.lucene.spatial.tier.InvalidGeoException" classpath="${toString:montysolr.classpath.testing}" />
			</and>
		</condition>

		<echo message="Are lucene jars available? ${lucene.jars.exist}" level="verbose" />
	</target>

	<target name="check-lucene-jars" depends="try-lucene-jars" unless="lucene.jars.exist">
		<delete dir="${solr.real.location}/dist/montysolr-extracted" />
		<mkdir dir="${solr.real.location}/dist/montysolr-extracted" />
		<unzip dest="${solr.real.location}/dist/montysolr-extracted" overwrite="yes">
			<fileset dir="${solr.real.location}/dist">
				<include name="apache-solr*.war" />
			</fileset>
		</unzip>
		<move todir="${solr.real.location}/dist/montysolr-extracted">
			<fileset dir="${solr.real.location}/dist/montysolr-extracted/WEB-INF/lib">
				<include name="**/**.jar"/>
			</fileset>
		</move>
		<delete dir="${solr.real.location}/dist/montysolr-extracted" includeemptydirs="true">
			<exclude name="**/**.jar"/>
		</delete>
	</target>
	
	<target name="set-jar-paths">
			<!--
	              The part below will discover all the paths inside the directory (for the
	              given pattern) and the property with .path end element will look like
	              path1 [dash][dash]jar path2 [dash][dash]jar path3....

	              However, this is suboptimal for cases, when there are two versions of the
	              jar file in the folder, for example:
	               solr-core-1.4.1.jar
	               solr-core-1.4.2-dev.jar

	          We include them all. TODO: pick the newest file only
	          -->
			<path id="solr.core.path">
				<fileset dir="${solr.real.location}/dist" id="solr.core.jar" >
					<filename name="*solr-core-*.jar"/>
				</fileset>
			</path>
			<pathconvert property="solr.core.jar.string" pathsep=" --jar ">
				<path refid="solr.core.path" />
			</pathconvert>

			<path id="solr.sorlj.path">
				<fileset dir="${solr.real.location}/dist" id="solr.solrj.jar" >
					<filename name="*solr-solrj-*.jar"/>
				</fileset>
			</path>
			<pathconvert property="solr.solrj.jar.string" pathsep=" --jar ">
				<path refid="solr.sorlj.path" />
			</pathconvert>

			<path id="montysolr.classpath">
				<fileset dir="${build.dir}" includes="montysolr*.jar" />
				<fileset dir="${solr.real.location}/dist" includes="**/*.jar" />
				<fileset dir="${solr.real.location}" includes="lib/**/*.jar" />
				<fileset dir="${solr.real.location}" includes="example/lib/**/*.jar" />
				<fileset dir="${solr.real.location}" includes="example/start.jar" />
				<fileset dir="${lib.dir}" includes="**/*.jar" />
			</path>
		</target>

		<!-- Compiles all java classes -->
		<target name="compile" depends="config-build">
			<compile srcdir="${src.dir.java}" destdir="${classes.dir}">
				<classpath path="${jcc_egg}/jcc/classes"/>
				<classpath refid="montysolr.classpath"/>
			</compile>
		</target>
	
	<!--
  ==================================================================
     Testing Python Eggs
  ==================================================================
  -->
	<target name="before-unzip">
		<delete dir="${build.dir}/${app.name}.egg-info" failonerror="no" />
		<delete dir="${build.dir}/EGG-INFO" failonerror="no" />
	</target>

	<!-- Unzip the egg into python-test to be loadable -->
	<target name="unzip-egg" depends="config-build,before-unzip">
		<delete dir="${dist.dir}/${app.name}" failonerror="yes" />
		<unzip dest="${dist.dir}" overwrite="yes">
			<fileset dir="${dist.dir}">
				<include name="${app.name}*.egg" />
			</fileset>
		</unzip>
		<move file="${dist.dir}/EGG-INFO" tofile="${dist.dir}/${app.name}.egg-info" />

		<!-- write the current classpath into a text file -->
		<echo file="${dist.dir}/${app.name}/classpath">${toString:montysolr.classpath}</echo>
	</target>



	<!-- Just a basic test to verify that our montysolr package is correctly compiled and contains the necessary classes -->
	<target name="test-egg" depends="config-build">
		<exec executable="${python}" dir="${dist.dir}" failonerror="true" logerror="true">
			<arg value="-c" />
			<arg value="import ${app.name} as X;X.initVM(X.CLASSPATH+'${path.separator}${toString:montysolr.classpath}',vmargs='-Dsolr.solr.home=/x/dev/workspace/test-solr/solr,-Dsolr.data.dir=/x/dev/workspace/test-solr/solr/data');assert (X.__file__ == 'montysolr/__init__.pyc')" />
		</exec>
	</target>



	<!--
	==================================================================
     Embedding PythonVM in JavaVM
    ==================================================================
    -->

	<!-- build solr for python -->
	<target name="build-solr" depends="config-build,compile-solr-egg,unzip-solr-egg"
	               description="Build separately the Python egg of Solr"/>
    <target name="compile-solr-egg" depends="config-build">
        <mkdir dir="${build.dir}" />
        <delete dir="${build.dir}/build" failonerror="no" />

        <echo message="You can watch Monty Python, this takes a while..." />

        <exec executable="${python}" dir="${build.dir}" failonerror="true" logerror="true">
            <env key="PYTHONPATH" value="${src.dir.python}${path.separator}${env.PYTHONPATH}" />

            <!-- this is mac specific, i will yet have to find out how to make it os-specific,
                 but it makes no problems to Ubuntu/SLC linux os'es so far -->
            <env key="JCC_LFLAGS" value="-framework${path.separator}JavaVM${path.separator}-framework${path.separator}Python" />


            <arg line="${jcc}" />
            <arg value="${ddash}shared" />
        	<arg value="${ddash}use_full_names" />
            <arg value="${ddash}version" />
            <arg value="${app.version}" />
            <arg value="${ddash}import"/>
            <arg value="lucene" />
            <arg line="${ddash}jar ${solr.core.jar.string}" />
            <arg line="${ddash}jar ${solr.solrj.jar.string}" />
            <arg value="${ddash}classpath" />
            <arg value="${toString:montysolr.classpath}${path.separator}${jcc_egg}/jcc/classes/" />
            <arg value="${ddash}package" />
            <arg value="java.lang" />
            <arg value="${ddash}python" />
            <arg value="${app.solr.name}" />
            <arg value="${ddash}build" />
            <arg value="${ddash}bdist" />
            <arg line="${ddash}files 5" />
            <!-- We exclude the embedded classes because they are Jetty specific -->
            <arg line="${ddash}exclude org.apache.solr.search.FunctionQParser
                       ${ddash}exclude org.apache.solr.client.solrj.embedded.NoLog 
                       ${ddash}exclude org.apache.solr.client.solrj.embedded.JettySolrRunner
                       ${ddash}exclude org.apache.solr.update.processor.UniqFieldsUpdateProcessorFactory
                       ${ddash}exclude org.apache.noggit.JSONParser
                       ${ddash}exclude org.apache.solr.util.xslt.TransformerProvider
                       ${ddash}rename org.apache.solr.handler.loader.ContentStreamLoader=LoaderContentStreamLoader
                      " />
        </exec>
    </target>
	
	<!-- Build MontySolr for Python -->
	<target name="build" depends="config-build,compile-montysolr-egg,unzip-egg"
		   description="Build MontySolr separately"/>
	
	<target name="compile-montysolr-egg" depends="compile,jar">
		<mkdir dir="${build.dir}" />
		<delete dir="${build.dir}/build" failonerror="no" />

		<exec executable="${python}" dir="${build.dir}" failonerror="true" logerror="true">
			<env key="PYTHONPATH" value="${src.dir.python}${path.separator}../${dist.dir}${path.separator}${env.PYTHONPATH}" />

			<!-- this is mac specific, i will yet have to find out how to make it os-specific -->
			<env key="JCC_LFLAGS" value="-framework${path.separator}JavaVM${path.separator}-framework${path.separator}Python" />

			<arg line="${jcc}" />
			<arg value="${ddash}shared" />
			<arg value="${ddash}use_full_names" />
			<arg value="${ddash}version" />
			<arg value="${app.version}" />
			<arg line="${jcc.build}" />
			<arg line="${jcc.build_also}" />
			<arg value="${ddash}import"/>
			<arg value="lucene" />
			<arg value="${ddash}import" />
			<arg value="${app.solr.name}" />

			<arg line="${jcc.packages}" />
			<arg value="${ddash}package" />
			<arg line="org.apache.solr.request" />
			<arg value="${ddash}classpath" />
			<arg value="${toString:montysolr.classpath}${path.separator}../${montysolr.jar}:${path.separator}${jcc_egg}/jcc/classes/" />
			<arg value="${ddash}include" />
			<arg value="${montysolr.jar}" />
			<arg value="${ddash}python" />
			<arg value="${app.name}" />
			<arg value="${ddash}build" />
			<arg value="${ddash}bdist" />

			<!-- this can be activated if i want to distribute python together with the jcc, python code
                 will be copied into the extension folder
            <arg value="${ddash}module" />
            <arg value="${src.dir.python}" />
            -->
		</exec>
	</target>
	
	<!-- poorman's way to run the python tests from inside ./src/python -->
	<target name="test-python">
	   <run-python-unittests python="${python}" python-path="${env.PYTHONPATH}${path.separator}${dist.dir}${path.separator}${src.dir.python}"
	    srcdir="${common.dir}/src/python"
	   />
	</target>

	
</project>	